// Quick Options.
$use-namespacing: false;
$use-prefix: false;

// Settings
$default-prefix: 'pn-';
// $class-prefix: $default-prefix;
// $prop-prefix: $default-prefix;

// Class namespaces.
$namespaces: (
  // Utility
  u: 'u-',
  // Object
  o: 'o-',
  // Component
  c: 'c-',
  // Theme Settings
  t: 't-',
  // Javascript Hook
  j: 'js-',
  // Is/Has
  i: 'is-',
  h: 'has-',
);

// Responsive Targets
$media-types: (
  phone: '(max-width: 480px)',
  tablet-portrait: '(max-width: 767px)',
  tablet-landscape-desktop: '(min-width: 768px) and (max-width: 979px)',
  large-desktop: '(min-width: 1200px)',
  non-retina: 'screen and (-webkit-max-device-pixel-ratio: 1)',
  retina: 'screen and (-webkit-min-device-pixel-ratio: 2)',
);

// Target media
@mixin media($media) {
  @if not map-contains($media-types, $media) {
    $media: large-desktop;
  }

  @media #{map-get($media-types, $media)} {
      @content;
  }
};

@function c($type, $name) {
  $class: $name;

  @if ($use-namespacing) {$class: map-get($namespaces, $type) + $class}
  @if ($use-prefix) {$class: $default-prefix + $class}

  @return '.#{$class}'
};

// Construct a new class.
@mixin c($type, $name) {
 #{c($type, $name)} {
    @content;
  }
};

// Custom Property
@function prop-prefix() {
  $prefix: '--';

  @if ($use-prefix) {$prefix: $prefix + $default-prefix}

  @return $prefix;
};

// Use library var.
@function v($name) {
  // $name: $name;
  // @if ($use-prefix) {$name: $prop-prefix + $name}
  @return var(#{prop-prefix()}#{$name});
};

// Generate a set of custom properties.
@mixin define-props($props: ()) {
  @each $name, $value in $props {
    #{prop-prefix()}#{$name}: $value;
  }
};
