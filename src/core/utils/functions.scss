$pn-prefix: 'pn-';
$default-prefix: '--';

// Generate a set of variables
@mixin define-vars($vars: ()) {
  @each $name, $value in $vars {
    #{$default-prefix}#{$pn-prefix}#{$name}: $value;
  }
};

// Use library var
@function v($var) {
  @return var(--#{$pn-prefix}#{$var});
};

// Construct a new component
// class with prefix
@mixin c($name) {
  .#{$pn-prefix}#{$name} {
    // Self bind
    $self: &;

    // Rules
    @content;
  }
};

// Responsive
$media-types: (
  phone: '(max-width: 480px)',
  tablet-portrait: '(max-width: 767px)',
  tablet-landscape-desktop: '(min-width: 768px) and (max-width: 979px)',
  large-desktop: '(min-width: 1200px)',
  non-retina: 'screen and (-webkit-max-device-pixel-ratio: 1)',
  retina: 'screen and (-webkit-min-device-pixel-ratio: 2)',
);

@mixin media($media) {
    @if not map-contains($media-types, $media) {
      $media: large-desktop;
    }
    @media #{map-get($media-types, $media)} {
        @content;
    }
}

// @include m(phone) {
//     .foo {
//         background: blue;
//     }
// }

// $phone: '(max-width: 480px)';
// $tablet-portrait: '(max-width: 767px)';
// $tablet-landscape-desktop: '(min-width: 768px) and (max-width: 979px)';
// $large-desktop: '(min-width: 1200px)';
// $non-retina: 'screen and (-webkit-max-device-pixel-ratio: 1)';
// $retina: 'screen and (-webkit-min-device-pixel-ratio: 2)';

// @mixin m($media) {
//   @media #{$media} {
//     @content;
//   }
// }
